## ===================================
## =======      FUNCTIONS      =======
## ===================================
_DEYE_PROJECT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

_COMMENT_DIRECTORY=backend/comment
_COMMENT_APP_DIRECTORY="${_COMMENT_DIRECTORY}"/app

_ADMIN_DIRECTORY=backend/admin
_ADMIN_APP_DIRECTORY="${_ADMIN_DIRECTORY}"/app

_IDENTITY_AND_ACCESS_DIRECTORY=backend/identity-and-access
_IDENTITY_AND_ACCESS_APP_DIRECTORY=${_IDENTITY_AND_ACCESS_DIRECTORY}/app

_FE_CUSTOMER_DIRECTORY=frontend/customer
_FE_CUSTOMER_APP_DIRECTORY="${_FE_CUSTOMER_DIRECTORY}"/app

deye-init() (
  cd "$_DEYE_PROJECT_DIR"

	echo "Initializing the Deye Web project for the development in the ${_DEYE_PROJECT_DIR}."

	git clone -q git@github.com:StartupCorporation/infrastructure.git infrastructure

	echo "Initializing comment microservice application."
	git clone -q git@github.com:StartupCorporation/comment-app.git "${_COMMENT_APP_DIRECTORY}"
	(cd "${_COMMENT_DIRECTORY}" && ln -s ../../infrastructure/comment-app infrastructure)

	echo "Initializing catalog microservice application."
	git clone -q git@github.com:StartupCorporation/admin-app.git "${_ADMIN_APP_DIRECTORY}"
	(cd "${_ADMIN_DIRECTORY}" && ln -s ../../infrastructure/admin-app infrastructure)

  echo "Initializing identity and access microservice application."
  git clone -q git@github.com:StartupCorporation/Identity-and-Access.git ${_IDENTITY_AND_ACCESS_APP_DIRECTORY}
	(cd "${_IDENTITY_AND_ACCESS_DIRECTORY}" && ln -s ../../infrastructure/identity-and-access-app infrastructure)

	echo "Initializing customer frontend application."
	git clone -q git@github.com:StartupCorporation/fe-customer-app.git "${_FE_CUSTOMER_APP_DIRECTORY}"
	(cd "${_FE_CUSTOMER_DIRECTORY}" && ln -s ../../infrastructure/fe-customer-app infrastructure)

	echo "Done."
)

pull-main() (
  cd "$_DEYE_PROJECT_DIR"

  repositories=(
    "${_COMMENT_APP_DIRECTORY}"
    "${_ADMIN_APP_DIRECTORY}"
    "${_FE_CUSTOMER_APP_DIRECTORY}"
    "${_IDENTITY_AND_ACCESS_APP_DIRECTORY}"
    infrastructure
  )

  for i in "${!repositories[@]}"
  do
    repo="${repositories[i]}"
    echo "Pulling changes for ${repo}"

    STASH_NAME="stashed_for_pulling_main"
    cd ${repo} > /dev/null
    git stash push -uq -m "${STASH_NAME}"
    git checkout -q main
    git pull
    git checkout -q -
    if [ $(git stash list | grep "${STASH_NAME}" | cut -d: -f1) ]; then
      git stash pop -q
    fi
    cd - > /dev/null
  done
)
